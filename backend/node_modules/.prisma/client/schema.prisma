generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Manager
  Employee
}

enum ExpenseStatus {
  Submitted
  Pending
  Approved
  Rejected
}

enum ApprovalDecision {
  Pending
  Approved
  Rejected
}

model Company {
  id           String   @id @default(uuid())
  name         String
  countryCode  String?
  currencyCode String?
  createdAt    DateTime @default(now())

  users         User[]
  expenses      Expense[]
  approvalFlows ApprovalFlow[]
}

model User {
  id           String @id @default(uuid())
  email        String @unique
  passwordHash String
  fullName     String
  role         Role

  companyId String
  company   Company? @relation(fields: [companyId], references: [id])

  managerId    String?
  manager      User?   @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates User[]  @relation("ManagerSubordinates")

  createdAt    DateTime       @default(now())
  expenses     Expense[]
  ApprovalStep ApprovalStep[]
  Approval     Approval[]
}

model Expense {
  id                      String        @id @default(uuid())
  companyId               String
  userId                  String
  amount                  Decimal       @db.Decimal(12, 2)
  currency                String
  amountInCompanyCurrency Decimal       @db.Decimal(12, 2)
  category                String?
  description             String?
  dateOfExpense           DateTime
  receiptUrl              String?
  status                  ExpenseStatus @default(Submitted)
  createdAt               DateTime      @default(now())

  company Company @relation(fields: [companyId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  approvals Approval[]
}

model ApprovalFlow {
  id        String   @id @default(uuid())
  companyId String
  name      String
  createdAt DateTime @default(now())

  company Company        @relation(fields: [companyId], references: [id])
  steps   ApprovalStep[]
  rules   ApprovalRule[]
}

model ApprovalStep {
  id         String @id @default(uuid())
  flowId     String
  approverId String
  sequence   Int

  flow     ApprovalFlow @relation(fields: [flowId], references: [id])
  approver User         @relation(fields: [approverId], references: [id])
}

model ApprovalRule {
  id           String @id @default(uuid())
  flowId       String @unique
  percentage   Int?
  specificRole Role?

  flow ApprovalFlow @relation(fields: [flowId], references: [id])
}

model Approval {
  id         String           @id @default(uuid())
  expenseId  String
  approverId String
  decision   ApprovalDecision @default(Pending)
  comment    String?

  expense  Expense @relation(fields: [expenseId], references: [id])
  approver User    @relation(fields: [approverId], references: [id])
}
