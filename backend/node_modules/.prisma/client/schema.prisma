datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  roleId   Int
  role     Role   @relation(fields: [roleId], references: [id])

  managerId    Int?
  manager      User?  @relation("UserManager", fields: [managerId], references: [id])
  subordinates User[] @relation("UserManager")

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  expenses     Expense[]
  approvals    Approval[]
  ApprovalStep ApprovalStep[]
}

model Company {
  id            Int            @id @default(autoincrement())
  name          String
  currency      String
  users         User[]
  approvalFlows ApprovalFlow[]
}

model Expense {
  id           Int      @id @default(autoincrement())
  amount       Float
  currency     String
  convertedAmt Float
  category     String
  description  String
  date         DateTime
  receiptUrl   String?

  employeeId Int
  employee   User @relation(fields: [employeeId], references: [id])

  status    ExpenseStatus @default(PENDING)
  approvals Approval[]
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

model ApprovalFlow {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  name  String
  steps ApprovalStep[]
  rules ApprovalRule?
}

model ApprovalStep {
  id     Int          @id @default(autoincrement())
  flowId Int
  flow   ApprovalFlow @relation(fields: [flowId], references: [id])

  sequence   Int
  approverId Int
  approver   User @relation(fields: [approverId], references: [id])
}

model Approval {
  id        Int     @id @default(autoincrement())
  expenseId Int
  expense   Expense @relation(fields: [expenseId], references: [id])

  approverId Int
  approver   User @relation(fields: [approverId], references: [id])

  decision  ApprovalDecision
  comment   String?
  createdAt DateTime         @default(now())
}

enum ApprovalDecision {
  APPROVED
  REJECTED
  PENDING
}

model ApprovalRule {
  id     Int          @id @default(autoincrement())
  flowId Int          @unique
  flow   ApprovalFlow @relation(fields: [flowId], references: [id])

  percentage    Int?
  mustIncludeId Int?
}
